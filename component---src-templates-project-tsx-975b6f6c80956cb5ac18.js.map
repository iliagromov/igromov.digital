{"version":3,"file":"component---src-templates-project-tsx-975b6f6c80956cb5ac18.js","mappings":"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","sources":["webpack://frontend/./src/components/common/Projects/SwiperToggles.tsx","webpack://frontend/./src/components/containers/PageProject/PageProject.tsx","webpack://frontend/./src/templates/project.tsx"],"sourcesContent":["import React, { FC, useState } from \"react\";\n\nimport { ReactSVG } from \"react-svg\";\nimport { useStaticQuery, graphql, Link, navigate } from \"gatsby\";\n\nimport \"./SwiperToggles.sass\";\nimport { useSwiper } from \"swiper/react\";\n\nconst SwiperToggles: FC = () => {\n  const selfSwiper = useSwiper();\n  const onPrev = () => selfSwiper.slidePrev();\n  const onNext = () => selfSwiper.slideNext();\n\n  const { iconArrow } = useStaticQuery(graphql`\n    query {\n      iconArrow: file(relativePath: { eq: \"icon-arrow.svg\" }) {\n        publicURL\n        name\n      }\n    }\n  `);\n\n  return (\n    <div className=\"project-slider__toggles\">\n      <div className=\"project-slider__btn\">\n        <button\n          onClick={onPrev}\n          className=\"swiper-button-prev page-btn project-slider__btn-prev\"\n        >\n          <ReactSVG className=\"page-svg\" src={iconArrow.publicURL} />\n        </button>\n      </div>\n      <div className=\"project-slider__btn\">\n        <div className=\"project-slider__btn-progress-bar\"></div>\n        <button\n          onClick={onNext}\n          className=\"swiper-button-next page-btn project-slider__btn-next\"\n        >\n          <ReactSVG className=\"page-svg\" src={iconArrow.publicURL} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport { SwiperToggles };\n","import React from \"react\";\n\nimport { Link, graphql, navigate, useStaticQuery } from \"gatsby\";\nimport \"./PageProject.sass\";\n\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { EffectCards, Navigation, Pagination } from \"swiper\";\nimport \"swiper/css\";\nimport \"swiper/css/effect-cards\";\nimport \"swiper/css/pagination\";\nimport \"swiper/css/navigation\";\n\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport { ReactSVG } from \"react-svg\";\nimport { SwiperToggles } from \"../../common/Projects/SwiperToggles\";\n\n//FIXME: описать тип проекта\ntype PageDataProjectProps = {\n  pageData: {\n    slug: string;\n    title: string;\n    publicData: string;\n    siteLink: string;\n    pagesCount: number;\n    pages: PageProjectProps[];\n  };\n};\n\nexport type PageProjectProps = {\n  title: string;\n  image: {\n    id?: string;\n    childImageSharp: {\n      gatsbyImageData: any;\n    };\n  };\n  layout: {\n    id?: string;\n    childImageSharp: {\n      gatsbyImageData: any;\n    };\n  };\n};\n\nconst PageProject: React.FC<PageDataProjectProps> = ({ pageData }) => {\n  const format = \"Site\";\n  const { iconArrow } = useStaticQuery(graphql`\n    query {\n      iconArrow: file(relativePath: { eq: \"icon-arrow.svg\" }) {\n        publicURL\n        name\n      }\n    }\n  `);\n\n  // useEffect(() => {\n  // \twindow.addEventListener('resize', function(){\n  // \t\tdirectionMedia = window.innerWidth >=768 ? 'vertical' : 'horizontal';\n  // \t});\n  // });\n\n  const { slug, title, pages, siteLink } = pageData;\n  const pageInit = pages.length;\n\n  const renderPagesLink = pages?.map((page: PageProjectProps, idx: number) => {\n    return (\n      <div className=\"tab-link\" key={`pagetitle${idx}`}>\n        {page.title}\n      </div>\n    );\n  });\n\n  const renderPagesImage = pages.map((page: PageProjectProps, idx: number) => {\n    const layout = getImage(page.layout);\n\n    return (\n      <SwiperSlide key={`page${idx + 1}`}>\n        <div className=\"SwiperSlideProjectCardPage\" key={`page${idx}`}>\n          <h1>{page.title} </h1>\n          <GatsbyImage image={layout} alt={\"img\"} />\n        </div>\n      </SwiperSlide>\n    );\n  });\n\n  return (\n    <>\n      <Link to={\"/projects\"} className=\"btn-back page__btn\">\n        <div className=\"page__btn_icon_arrow-left\">\n          <ReactSVG className=\"page-svg\" src={iconArrow.publicURL} />\n        </div>\n        <span>назад</span>\n      </Link>\n      <section className=\"project-page\">\n        <div className=\"wrapper\">\n          <div className=\"project-page-content\">\n            <div className=\"page__title page_transform-uppercase\">\n              <h2 className=\"page__subtitle_big\">{format}</h2>\n              <h2 className=\"page__title_main page__title-h2 page_bold\">\n                {title}\n              </h2>\n            </div>\n            <div className=\"project-page-content__description\">\n              <Swiper\n                initialSlide={0}\n                effect={\"cards\"}\n                grabCursor={true}\n                modules={[EffectCards, Navigation, Pagination]}\n                className=\"swiperProjectCardPages\"\n                direction={\"horizontal\"}\n              >\n                {renderPagesImage}\n\n                <SwiperToggles />\n              </Swiper>\n            </div>\n\n            <div className=\"project-page-content__info\">\n              <aside className=\"project-info\">\n                <div className=\"project-info__element\">\n                  <h3 className=\"page__title-h3\">Ссылка:</h3>\n                  <a\n                    className=\"page__link page__link_site\"\n                    href={siteLink}\n                    target=\"_blank\"\n                  >{`${slug}.io`}</a>\n                </div>\n                <div className=\"project-info__element project-info__element_list\">\n                  <h3 className=\"page__title-h3\">Список страниц:</h3>\n                  <nav className=\"tab-nav\">{renderPagesLink}</nav>\n                </div>\n                <div className=\"project-info__element project-info__task\">\n                  <h3 className=\"page__title-h3\">Задача:</h3>\n                  <p className=\"page__text\">\n                    Разработка сайта для компании site.\n                  </p>\n                </div>\n                <div className=\"project-info__element project-info__technology\">\n                  <h3 className=\"page__title-h3\">Используемые технологии:</h3>\n                  <ul className=\"page__list\"></ul>\n                </div>\n                <div className=\"project-info__element project-info__days\">\n                  <h3 className=\"page__title-h3\">Сроки:</h3>\n                  <p className=\"page__text\">\n                    {/* <span className=\"page__number_days\">{days} </span> */}\n                    &nbsp;<span className=\"page__number_days_text\">дней.</span>\n                  </p>\n                </div>\n                <div className=\"project-info__element project-info__date\">\n                  <h3 className=\"page__title-h3\">Дата создания:</h3>\n                  <p className=\"page__text\">9 февраля 2019</p>\n                </div>\n              </aside>\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\nexport default PageProject;\n","import React from \"react\";\nimport Layout from \"../layouts/Default\";\nimport SEO from \"../components/seo\";\nimport { PageProps, graphql } from \"gatsby\";\nimport PageProject, {\n  PageProjectProps,\n} from \"../components/containers/PageProject/PageProject\";\nimport { MDXProvider } from \"@mdx-js/react\";\n\nexport const query = graphql`\n  query GetCurrentProject($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        slug\n        title\n        publicData\n        pagesCount\n        siteLink\n        pages {\n          page {\n            title\n            image {\n              id\n              childImageSharp {\n                gatsbyImageData(\n                  formats: [WEBP]\n                  transformOptions: { fit: COVER, cropFocus: CENTER }\n                  quality: 100\n                )\n              }\n            }\n            layout {\n              id\n              childImageSharp {\n                gatsbyImageData(\n                  width: 800\n                  height: 900\n                  formats: [WEBP]\n\n                  transformOptions: { fit: COVER, cropFocus: NORTH }\n                  quality: 100\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype TProject = {\n  page: PageProjectProps[];\n};\n\nconst BlogPost: React.FC<PageProps> = (props) => {\n  const title = `Project ${\n    props.data.mdx.frontmatter?.title ? props.data.mdx.frontmatter?.title : \"\"\n  }`;\n\n  const pages: PageProjectProps[] = props.data.mdx?.frontmatter?.pages?.map(\n    (project: TProject) => {\n      const merged = {\n        title: \"\",\n        image: {},\n        layout: {},\n      };\n      project.page.forEach((item) => {\n        if (item?.title?.length) {\n          merged.title = item.title;\n        }\n        if (item?.image?.id?.length) {\n          merged.image = item.image;\n        }\n        if (item?.layout?.id?.length) {\n          merged.layout = item.layout;\n        }\n      });\n      return merged;\n    }\n  );\n\n  const SelfProject = {\n    slug: props.data.mdx.frontmatter.slug,\n    title: props.data.mdx.frontmatter.title,\n    publicData: props.data.mdx.frontmatter.publicData,\n    pagesCount: props.data.mdx.frontmatter.pagesCount,\n    siteLink: props.data.mdx.frontmatter.siteLink,\n    pages: pages,\n  };\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <PageProject pageData={SelfProject} />\n    </Layout>\n  );\n};\nexport default BlogPost;\n"],"names":["SwiperToggles","selfSwiper","useSwiper","iconArrow","useStaticQuery","React","className","onClick","onPrev","slidePrev","ReactSVG","src","publicURL","onNext","slideNext","_ref","pageData","slug","title","pages","siteLink","renderPagesLink","length","map","page","idx","key","renderPagesImage","layout","getImage","SwiperSlide","GatsbyImage","image","alt","Link","to","Swiper","initialSlide","effect","grabCursor","modules","EffectCards","Navigation","Pagination","direction","href","target","props","_props$data$mdx$front","_props$data$mdx$front2","_props$data$mdx","_props$data$mdx$front3","_props$data$mdx$front4","data","mdx","frontmatter","project","merged","forEach","item","_item$title","_item$image","_item$image$id","_item$layout","_item$layout$id","id","SelfProject","publicData","pagesCount","Layout","SEO","PageProject"],"sourceRoot":""}